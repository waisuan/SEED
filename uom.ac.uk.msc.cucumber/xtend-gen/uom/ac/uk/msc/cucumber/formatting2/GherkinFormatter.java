/**
 * generated by Xtext
 */
package uom.ac.uk.msc.cucumber.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import uom.ac.uk.msc.cucumber.gherkin.Background;
import uom.ac.uk.msc.cucumber.gherkin.DocString;
import uom.ac.uk.msc.cucumber.gherkin.Examples;
import uom.ac.uk.msc.cucumber.gherkin.Feature;
import uom.ac.uk.msc.cucumber.gherkin.Scenario;
import uom.ac.uk.msc.cucumber.gherkin.ScenarioOutline;
import uom.ac.uk.msc.cucumber.gherkin.Step;
import uom.ac.uk.msc.cucumber.gherkin.Table;
import uom.ac.uk.msc.cucumber.gherkin.Tag;
import uom.ac.uk.msc.cucumber.services.GherkinGrammarAccess;

@SuppressWarnings("all")
public class GherkinFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private GherkinGrammarAccess _gherkinGrammarAccess;
  
  protected void _format(final Feature feature, @Extension final IFormattableDocument document) {
    EList<Tag> _tags = feature.getTags();
    for (final Tag tags : _tags) {
      this.format(tags, document);
    }
    Background _background = feature.getBackground();
    this.format(_background, document);
    EList<EObject> _scenarios = feature.getScenarios();
    for (final EObject scenarios : _scenarios) {
      this.format(scenarios, document);
    }
  }
  
  protected void _format(final Background background, @Extension final IFormattableDocument document) {
    EList<Step> _steps = background.getSteps();
    for (final Step steps : _steps) {
      this.format(steps, document);
    }
  }
  
  protected void _format(final Scenario scenario, @Extension final IFormattableDocument document) {
    EList<Tag> _tags = scenario.getTags();
    for (final Tag tags : _tags) {
      this.format(tags, document);
    }
    EList<Step> _steps = scenario.getSteps();
    for (final Step steps : _steps) {
      this.format(steps, document);
    }
  }
  
  protected void _format(final ScenarioOutline scenariooutline, @Extension final IFormattableDocument document) {
    EList<Tag> _tags = scenariooutline.getTags();
    for (final Tag tags : _tags) {
      this.format(tags, document);
    }
    EList<Step> _steps = scenariooutline.getSteps();
    for (final Step steps : _steps) {
      this.format(steps, document);
    }
    Examples _examples = scenariooutline.getExamples();
    this.format(_examples, document);
  }
  
  protected void _format(final Step step, @Extension final IFormattableDocument document) {
    EList<Table> _tables = step.getTables();
    for (final Table tables : _tables) {
      this.format(tables, document);
    }
    DocString _code = step.getCode();
    this.format(_code, document);
  }
  
  protected void _format(final Examples examples, @Extension final IFormattableDocument document) {
    Table _table = examples.getTable();
    this.format(_table, document);
  }
  
  public void format(final Object background, final IFormattableDocument document) {
    if (background instanceof XtextResource) {
      _format((XtextResource)background, document);
      return;
    } else if (background instanceof Background) {
      _format((Background)background, document);
      return;
    } else if (background instanceof Examples) {
      _format((Examples)background, document);
      return;
    } else if (background instanceof Feature) {
      _format((Feature)background, document);
      return;
    } else if (background instanceof Scenario) {
      _format((Scenario)background, document);
      return;
    } else if (background instanceof ScenarioOutline) {
      _format((ScenarioOutline)background, document);
      return;
    } else if (background instanceof Step) {
      _format((Step)background, document);
      return;
    } else if (background == null) {
      _format((Void)null, document);
      return;
    } else if (background != null) {
      _format(background, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(background, document).toString());
    }
  }
}
